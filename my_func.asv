%% my_func.M
% Author: Steven Psaltis
% 24 August 2022
%
% function of a collection of ideas
%
function F = my_func(N)
    F = 1;

%     for i = 1:N
%         fprintf("i = %d\n", i);
%     end

%     M = N^2;
%     for j = 1:M
%         fprintf("j^2 = %d\n", j*j);
%     end

    try
        c = parcluster('local');
        % must change the Job data location to a unique directory
        % per job ... tempdir command achieves this
        c.JobStorageLocation = tempdir;
        % a batch job may not use more than 8 workers
        if (ispc())
            p = parpool(c, 4);
        else
            p = parpool(c, 8);
        end
    catch e
        fprintf('Error setting up parallel pool!\n');
    end

    fprintf('Sequential for loop: ')
    tic;
    sqrd = zeros(N, 1);
    for i = 1:N
        sqrd(i, 1) = i^2;
    end
    toc

    fprintf('Parallel for loop: ')
    tic;
    sqrd2 = zeros(N, 1);
    parfor i = 1:N
        sqrd2(i, 1) = i^2;
    end
    toc

    %% Example where parallel is faster than sequential
% %     fprintf('Sequential for loop: ')
% %     tic
% %     n = 20;
% %     A = 500;
% %     a = zeros(n);
% %     for i = 1:n
% %         a(i) = max(abs(eig(rand(A))));
% %     end
% %     toc
% % 
% %     fprintf('Parallel for loop: ')
% %     tic
% %     ticBytes(gcp);
% %     n = 20;
% %     A = 500;
% %     a = zeros(n);
% %     parfor i = 1:n
% %         a(i) = max(abs(eig(rand(A))));
% %     end
% %     tocBytes(gcp)
% %     toc

    %% Comparison between for loop and vectorised code (simple)
    tic;
    sqrd3 = ((1:N).^2);
    toc

    %% Arrayfun can be slower than for loop
    some_func = @(x)(sqrt(x) + 1.5);
    fprintf("For loop: ")
    tic;
    func_array = zeros(N, 1);
    for i = 1:N
        func_array(i, 1) = some_func(i);
    end
    toc

    tic;
    fprintf("Arrayfun: ")
    func_array2 = linspace(1, N, N);
    func_array2 = arrayfun(some_func, func_array2(:));
    toc

    %% Structures
    constants.a = 1;
    constants.b = 2;
    constants.c = 3;

    

end